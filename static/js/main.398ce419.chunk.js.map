{"version":3,"sources":["assets/Marker.png","components/Citybikes.js","App.js","reportWebVitals.js","index.js"],"names":["Citybikes","useState","latitude","longitude","width","height","zoom","viewport","setViewport","bikeStops","setBikeStops","selectedStop","setSelected","getBikeStops","a","fetch","method","headers","body","JSON","stringify","query","then","response","json","data","bikeRentalStations","console","log","catch","error","useEffect","mapboxApiAccessToken","process","mapStyle","onViewportChange","map","bikestop","lat","lon","onClick","e","preventDefault","style","border","background","src","MarkerImg","alt","stationId","onClose","name","bikesAvailable","spacesAvailable","App","display","alignItems","justifyContent","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAAe,MAA0B,mC,OC8F1BA,MA1Ff,WAAqB,MAEeC,mBAAS,CACrCC,SAAU,WACVC,UAAW,WACXC,MAAO,SACPC,OAAQ,QACRC,KAAM,KAPO,mBAEVC,EAFU,KAEAC,EAFA,OAUmBP,mBAAS,IAV5B,mBAURQ,EAVQ,KAUGC,EAVH,OAYqBT,mBAAS,MAZ9B,mBAYRU,EAZQ,KAYMC,EAZN,KA2BTC,EAAY,uCAAG,sBAAAC,EAAA,sEACbC,MAAM,kEAAmE,CAC7EC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACnBC,MAjBiB,kLAoBpBC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJf,EAAae,EAAKA,KAAKC,oBACvBC,QAAQC,IAAI,wBAEbC,OAAM,SAACC,GACNH,QAAQC,IAAI,QAASE,MAdJ,2CAAH,qDAwBpB,OAJEH,QAAQC,IAAI,gBAEZG,qBAAU,WAAOlB,MAAiB,IAGhC,gCACI,+CAAkBN,EAASL,SAAW,KAAOK,EAASJ,UAAY,QAClE,eAAC,IAAD,2BAAgBI,GAAhB,IAA0ByB,qBAAsBC,mGAChDC,SAAS,yDACTC,iBAAkB,SAAC5B,GAAcC,EAAYD,IAF7C,UAICE,EAAU2B,KAAI,SAACC,GAAD,OACf,cAAC,IAAD,CAAiCnC,SAAUmC,EAASC,IAAKnC,UAAWkC,EAASE,IAA7E,SAEI,wBAAQC,QAAS,SAACC,GACdA,EAAEC,iBACF9B,EAAYyB,IAEhBM,MAAO,CAACC,OAAQ,OAAQC,WAAY,eAJpC,SAKA,qBAAKC,IAAKC,EAAWC,IAAI,cAAcL,MAAO,CAACvC,MAAO,GAAIC,OAAQ,SAPzDgC,EAASY,cAWzBtC,EACG,cAAC,IAAD,CACAT,SAAUS,EAAa2B,IACvBnC,UAAWQ,EAAa4B,IACxBW,QAAS,WACLtC,EAAY,OAJhB,SAOI,gCACI,6BAAKD,EAAasC,UAAY,MAAQtC,EAAawC,OACnD,4BAAI,yBAAqBxC,EAAayC,iBACtC,4BAAI,uBAAsBzC,EAAa0C,uBAG/C,aC5EGC,MATf,WAEE,OACE,qBAAKX,MAAO,CAACY,QAAS,OAAQC,WAAY,SAAUC,eAAgB,UAApE,SACE,cAAC,EAAD,CAAWd,MAAO,CAACY,QAAS,aCKnBG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtC,MAAK,YAAkD,IAA/CuC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.398ce419.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Marker.371ecdc5.png\";","import React, { useState, useEffect } from \"react\";\nimport ReactMapGL, {Marker, Popup} from 'react-map-gl';\nimport MarkerImg from '../assets/Marker.png';\n\nfunction Citybikes() {\n    // Declare viewport as the map canvas\n    const [viewport, setViewport] = useState({\n        latitude: 60.1619311,\n        longitude: 24.9214896,\n        width: \"1000px\",\n        height: \"700px\",\n        zoom: 13\n      });\n    // Store bikestops data array\n      const [bikeStops, setBikeStops] = useState([]);\n    // Store the value of a selected bikestop, intitially null\n      const [selectedStop, setSelected] = useState(null);\n\n    // GraphQL query for getting bikestops\n      const queryForBikeStops = \n      `{\n        bikeRentalStations {\n          stationId\n          name\n          lat\n          lon\n          bikesAvailable\n          spacesAvailable\n        }\n      }`\n    // HTTP post to api endpoint\n      const getBikeStops = async () => {\n        await fetch('https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql', {\n          method: 'POST',\n          headers: {'Content-Type': 'application/json'},\n          body: JSON.stringify({\n            query: queryForBikeStops\n          }),\n        })\n        .then(response => response.json())\n        .then(data => {\n          setBikeStops(data.data.bikeRentalStations);\n          console.log(\"Fetched bikestops\");\n        })\n        .catch((error) => {\n          console.log('Error', error);\n        })\n      }\n\n    //getBikeStops();\n      //console.log(bikeStops[0]);\n      console.log(\"re-rendered \");\n    // Run getBikeStops() on render\n      useEffect(() => {getBikeStops()}, []);\n\n    return(\n        <div>\n            <div>Coodinates: {viewport.latitude + ', ' + viewport.longitude + ', '}</div>\n            <ReactMapGL {...viewport} mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN} \n            mapStyle='mapbox://styles/feelikskilpi/ckn9xjg352eh718pf27f3hips'\n            onViewportChange={(viewport) => {setViewport(viewport)}}\n            >\n            {bikeStops.map((bikestop) => (\n            <Marker key={bikestop.stationId} latitude={bikestop.lat} longitude={bikestop.lon}>\n                \n                <button onClick={(e) => {\n                    e.preventDefault();\n                    setSelected(bikestop);\n                }}\n                style={{border: 'none', background: 'Transparent'}}>\n                <img src={MarkerImg} alt=\"BikeStation\" style={{width: 50, height: 50}}/>\n                </button>\n            </Marker>\n            ))}\n        {selectedStop ? (\n            <Popup \n            latitude={selectedStop.lat} \n            longitude={selectedStop.lon}\n            onClose={() => {\n                setSelected(null);\n            }}\n            >\n                <div>\n                    <h3>{selectedStop.stationId + ' - ' + selectedStop.name}</h3>\n                    <p>{'Vapaita pyöriä: ' + selectedStop.bikesAvailable}</p>\n                    <p>{'Tyhjiä paikkoja: ' + selectedStop.spacesAvailable}</p>\n                </div>\n            </Popup>\n        ) : null}\n     </ReactMapGL>\n    </div>\n    );\n}\n\nexport default Citybikes;","import React from 'react';\nimport Citybikes from './components/Citybikes';\n\nfunction App() {\n\n  return (\n    <div style={{display: 'flex', alignItems: 'center', justifyContent: 'center'}}>\n      <Citybikes style={{display: 'flex'}}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}